package gwt.material.design.client.resources;

import com.google.gwt.core.client.GWT;
import com.google.gwt.resources.client.ResourcePrototype;

public class MaterialTableDebugBundle_en_InlineClientBundleGenerator implements gwt.material.design.client.resources.MaterialTableDebugBundle {
  private static MaterialTableDebugBundle_en_InlineClientBundleGenerator _instance0 = new MaterialTableDebugBundle_en_InlineClientBundleGenerator();
  private void greedyScrollInitializer() {
    greedyScroll = new com.google.gwt.resources.client.TextResource() {
      // jar:file:/Users/danial/.m2/repository/com/github/gwtmaterialdesign/gwt-material-table/2.0.1/gwt-material-table-2.0.1.jar!/gwt/material/design/client/resources/js/greedyscroll.js
      public String getText() {
        return "/*\n * #%L\n * GwtMaterialDesign\n * %%\n * Copyright (C) 2015 GwtMaterial\n * %%\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * #L%\n */\n\n/**\n * @author Ben Dol\n */\n;\n(function ($, window, undefined) {\n  \"use strict\";\n\n  var name = \"greedyScroll\",\n    id = 0,\n    defaults = {\n      topScrollOnFocus: true,\n      topScrollMargin: 3\n    };\n\n  function Plugin(el, options) {\n    // To avoid scope issues, use \"base\" instead of \"this\"\n    // to reference this class from internal events and functions.\n    var base = this;\n\n    // Access to jQuery and DOM versions of element\n    base.$el = $(el);\n    base.el = el;\n    base.id = id++;\n\n    base.$window = $(window);\n    base.$body = $(\"body\");\n    base.locked = [];\n\n    // Listen for destroyed, call teardown\n    base.$el.bind(\"destroyed\", $.proxy(base.teardown, base));\n\n    base.init = function () {\n      base.options = $.extend({}, defaults, options);\n\n      base.$el.attr(\"tabindex\", 0);\n\n      base.bind();\n    };\n\n    base.destroy = function () {\n      base.$el.unbind(\"destroyed\", base.teardown);\n      base.teardown();\n    };\n\n    base.teardown = function () {\n      $.removeData(base.el, \"plugin_\" + name);\n      base.unbind();\n\n      base.el = null;\n      base.$el = null;\n    };\n\n    base.bind = function () {\n      base.$el\n        .on(\"focus.\" + name, base.lockParents)\n        .on(\"blur.\" + name, base.unlockParents)\n        .on(\"scroll.\" + name, $.throttle(100, base.scroll));\n    };\n\n    base.unbind = function () {\n      base.$el.off(\".\" + name);\n    };\n\n    base.scroll = function(e) {\n      var $this = $(this);\n\n      if(!$this.isScrollEnd() && !$this.isScrollStart()) {\n        base.lockParents();\n      } else if(!$this.is(\":focus\")) {\n        base.unlockParents();\n      }\n    };\n\n    base.lockParents = function() {\n      // Ensure we are at the top of the panel\n      if(base.options.topScrollOnFocus) {\n        var top = base.$el.offset().top,\n            scrollTop = base.$body.scrollTop();\n\n        if(scrollTop > top) {\n          base.$body.scrollTop(top - base.options.topScrollMargin);\n        }\n      }\n\n      base.$body.addClass(\"overflow-hidden\");\n\n      $(this).parents().each(function(i) {\n        var $this = $(this);\n\n        if($this.hasScrollBar()) {\n          base.locked[i] = $this;\n          $this.addClass(\"overflow-hidden\");\n        }\n      });\n    };\n\n    base.unlockParents = function() {\n      base.$body.removeClass(\"overflow-hidden\");\n\n      for(var i in base.locked) {\n        base.locked[i].removeClass(\"overflow-hidden\");\n      }\n    };\n\n    // Run initializer\n    base.init();\n  }\n\n  // A plugin wrapper around the constructor,\n  // preventing against multiple instantiations\n  $.fn[name] = function (options) {\n    return this.each(function () {\n      var instance = $.data(this, \"plugin_\" + name);\n      if (instance) {\n        if (typeof options === \"string\") {\n          instance[options].apply(instance);\n        } else {\n          instance.updateOptions(options);\n        }\n      } else if (options !== \"destroy\") {\n        $.data(this, \"plugin_\" + name, new Plugin(this, options));\n      }\n    });\n  };\n\n})(jQuery, window);\n";
      }
      public String getName() {
        return "greedyScroll";
      }
    }
    ;
  }
  private static class greedyScrollInitializer {
    static {
      _instance0.greedyScrollInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return greedyScroll;
    }
  }
  public com.google.gwt.resources.client.TextResource greedyScroll() {
    return greedyScrollInitializer.get();
  }
  private void jQueryExtInitializer() {
    jQueryExt = new com.google.gwt.resources.client.TextResource() {
      // jar:file:/Users/danial/.m2/repository/com/github/gwtmaterialdesign/gwt-material-table/2.0.1/gwt-material-table-2.0.1.jar!/gwt/material/design/client/resources/js/jquery-ext.js
      public String getText() {
        return "/*\n * jQuery throttle / debounce - v1.1 - 3/7/2010\n * http://benalman.com/projects/jquery-throttle-debounce-plugin/\n * \n * Copyright (c) 2010 \"Cowboy\" Ben Alman\n * Dual licensed under the MIT and GPL licenses.\n * http://benalman.com/about/license/\n */\n(function(b,c){var $=b.jQuery||b.Cowboy||(b.Cowboy={}),a;$.throttle=a=function(e,f,j,i){var h,d=0;if(typeof f!==\"boolean\"){i=j;j=f;f=c}function g(){var o=this,m=+new Date()-d,n=arguments;function l(){d=+new Date();j.apply(o,n)}function k(){h=c}if(i&&!h){l()}h&&clearTimeout(h);if(i===c&&m>e){l()}else{if(f!==true){h=setTimeout(i?k:l,i===c?e-m:e)}}}if($.guid){g.guid=j.guid=j.guid||$.guid++}return g};$.debounce=function(d,e,f){return f===c?a(d,e,false):a(d,f,e!==false)}})(this);\n\n/*\n * #%L\n * GwtMaterialDesign\n * %%\n * Copyright (C) 2015 GwtMaterial\n * %%\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * #L%\n */\n\n/*\n * jQuery Extension Library v1.0\n *\n * @author Ben Dol\n */\n(function($) {\n  $.fn.forceRedraw = function(){\n    var element = this[0];\n\n    var n = document.createTextNode(' ');\n    var disp = element.style.display;  // don't worry about previous display style\n\n    element.appendChild(n);\n    element.style.display = 'none';\n\n    setTimeout(function(){\n        element.style.display = disp;\n        n.parentNode.removeChild(n);\n    }, 10); // you can play with this timeout to make it as short as possible\n    return this;\n  };\n\n  $.fn.insertAt = function(index, element) {\n    var lastIndex = this.children().size();\n    if (index < 0) {\n      index = Math.max(0, lastIndex + 1 + index)\n    }\n    this.append(element);\n    if (index < lastIndex) {\n      this.children().eq(index).before(this.children().last())\n    }\n    return this;\n  };\n\n  $.fn.longpress = function(longCallback, shortCallback, duration) {\n    if (typeof duration === \"undefined\") {\n      duration = 500;\n    }\n\n    return this.each(function() {\n      var $this = $(this);\n\n      // to keep track of how long something was pressed\n      var mouse_down_time;\n      var timeout;\n\n      // mousedown or touchstart callback\n      function mousedown_callback(e) {\n        mouse_down_time = new Date().getTime();\n        var context = $(this);\n\n        // set a timeout to call the longpress callback when time elapses\n        timeout = setTimeout(function() {\n          if (typeof longCallback === \"function\") {\n            longCallback.call(context, e);\n          } else {\n            $.error('Callback required for long press. You provided: ' + typeof longCallback);\n          }\n        }, duration);\n      }\n\n      // mouseup or touchend callback\n      function mouseup_callback(e) {\n        var press_time = new Date().getTime() - mouse_down_time;\n        if (press_time < duration) {\n          // cancel the timeout\n          clearTimeout(timeout);\n\n          // call the shortCallback if provided\n          if (typeof shortCallback === \"function\") {\n            shortCallback.call($(this), e);\n          } else if (typeof shortCallback === \"undefined\") {\n            ;\n          } else {\n            $.error('Optional callback for short press should be a function.');\n          }\n        }\n      }\n\n      // cancel long press event if the finger or mouse was moved\n      function move_callback(e) {\n        clearTimeout(timeout);\n      }\n\n      // Browser Support\n      $this.on('mousedown', mousedown_callback);\n      $this.on('mouseup', mouseup_callback);\n      $this.on('mousemove', move_callback);\n\n      // Mobile Support\n      $this.on('touchstart', mousedown_callback);\n      $this.on('touchend', mouseup_callback);\n      $this.on('touchmove', move_callback);\n      return this;\n    });\n  };\n\n  $.fn.hasVerticalScrollBar = function() {\n    return this.get(0) ? this.get(0).scrollHeight > this.innerHeight() : false;\n  };\n\n  $.fn.hasHorizontalScrollBar = function() {\n    return this.get(0) ? this.get(0).scrollWidth > this.innerWidth() : false;\n  };\n\n  $.fn.hasScrollBar = function() {\n    return this.hasVerticalScrollBar() || this.hasHorizontalScrollBar();\n  };\n\n  $.scrollBarWidth = function(container) {\n    if(container === null || typeof container === \"undefined\") {\n        container = document.body;\n    }\n    var inner = document.createElement(\"p\");\n    inner.style.width = \"100%\";\n    inner.style.height = \"200px\";\n  \n    var outer = document.createElement(\"div\");\n    outer.style.position = \"absolute\";\n    outer.style.top = \"0px\";\n    outer.style.left = \"0px\";\n    outer.style.visibility = \"hidden\";\n    outer.style.width = \"200px\";\n    outer.style.height = \"150px\";\n    outer.style.overflow = \"hidden\";\n    outer.appendChild(inner);\n\n    container.appendChild(outer);\n    var w1 = inner.offsetWidth;\n    outer.style.overflow = \"scroll\";\n    var w2 = inner.offsetWidth;\n    if (w1 === w2) w2 = outer.clientWidth;\n\n    container.removeChild(outer);\n\n    return (w1 - w2);\n  };\n\n  $.fn.isScrollEnd = function() {\n    return this.scrollTop() >= this[0].scrollHeight - this.outerHeight();\n  };\n\n  $.fn.isScrollStart = function() {\n    return this.scrollTop() <= this[0].scrollHeight - this.outerHeight();\n  };\n\n  $.fn.scrollHandler = function(dir, name, handler) {\n    var base = this;\n    var lastScroll = { x: 0, y: 0 };\n    return base.on(\"scroll.\" + name, function(e) {\n      var $this = $(this),\n          scrollTop = $this.scrollTop(),\n          scrollLeft = $this.scrollLeft();\n\n      var scroll = {\n            dirs: [], \n            isUp: function() { return $.inArray(\"up\", this.dirs) > -1; },\n            isDown: function() { return $.inArray(\"down\", this.dirs) > -1; },\n            isLeft: function() { return $.inArray(\"left\", this.dirs) > -1; },\n            isRight: function() { return $.inArray(\"right\", this.dirs) > -1; },\n            isX: function() { return this.isLeft() || this.isRight(); },\n            isY: function() { return this.isUp() || this.isDown(); }\n          }, \n          index = 0;\n      if(lastScroll.y > scrollTop) {\n        scroll.dirs[index++] = \"up\";\n      } else if(lastScroll.y != scrollTop) {\n        scroll.dirs[index++] = \"down\";\n      }\n\n      if(lastScroll.x > scrollLeft) {\n        scroll.dirs[index++] = \"left\";\n      } else if(lastScroll.x != scrollLeft) {\n        scroll.dirs[index++] = \"right\";\n      }\n\n      if(dir) {\n        if($.isArray(dir)) {\n          for(var d in scroll.dirs) {\n            if($.inArray(scroll.dirs[d], dir) > -1) {\n              handler(e, scroll);\n              break; // Found at least one match\n            }\n          }\n        } else if(dir == \"any\" || $.inArray(dir, scroll.dirs) > -1) {\n          handler(e, scroll);\n        }\n      } else {\n        handler(e, scroll);\n      }\n\n      lastScroll = { x: scrollLeft,  y: scrollTop };\n    });\n  };\n\n  $.fn.smartScroll = function(name, handler) {\n    return this.scrollHandler(\"any\", name, handler);\n  };\n\n  $.fn.scrollY = function(name, handler) {\n    return this.scrollHandler([\"up\", \"down\"], name, handler);\n  };\n\n  $.fn.scrollX = function(name, handler) {\n    return this.scrollHandler([\"left\", \"right\"], name, handler);\n  };\n\n  $.fn.onScrollUp = function(name, handler) {\n    return this.scrollHandler(\"up\", name, handler);\n  };\n\n  $.fn.onScrollDown = function(name, handler) {\n    return this.scrollHandler(\"down\", name, handler);\n  };\n\n  $.fn.onScrollLeft = function(name, handler) {\n    return this.scrollHandler(\"left\", name, handler);\n  };\n\n  $.fn.onScrollRight = function(name, handler) {\n    return this.scrollHandler(\"right\", name, handler);\n  };\n})(jQuery);";
      }
      public String getName() {
        return "jQueryExt";
      }
    }
    ;
  }
  private static class jQueryExtInitializer {
    static {
      _instance0.jQueryExtInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return jQueryExt;
    }
  }
  public com.google.gwt.resources.client.TextResource jQueryExt() {
    return jQueryExtInitializer.get();
  }
  private void stickythInitializer() {
    stickyth = new com.google.gwt.resources.client.TextResource() {
      // jar:file:/Users/danial/.m2/repository/com/github/gwtmaterialdesign/gwt-material-table/2.0.1/gwt-material-table-2.0.1.jar!/gwt/material/design/client/resources/js/stickyth.js
      public String getText() {
        return "/*! Copyright (c) 2011 by Jonas Mosbech - https://github.com/jmosbech/StickyTableHeaders\n  MIT license info: https://github.com/jmosbech/StickyTableHeaders/blob/master/license.txt */\n\n;\n(function ($, window, undefined) {\n  'use strict';\n\n  var name = 'stickyTableHeaders',\n    id = 0,\n    defaults = {\n      fixedOffset: 0,\n      leftOffset: 0,\n      marginTop: 0,\n      scrollableArea: window\n    };\n\n  function Plugin(el, options) {\n    // To avoid scope issues, use 'base' instead of 'this'\n    // to reference this class from internal events and functions.\n    var base = this;\n\n    // Access to jQuery and DOM versions of element\n    base.$el = $(el);\n    base.el = el;\n    base.id = id++;\n    base.name = base.name + base.id;\n    base.$window = $(window);\n    base.$document = $(document);\n\n    // Listen for destroyed, call teardown\n    base.$el.bind('destroyed', $.proxy(base.teardown, base));\n\n    // Cache DOM refs for performance reasons\n    base.$clonedHeader = null;\n    base.$originalHeader = null;\n\n    // Keep track of state\n    base.isSticky = false;\n    base.hasBeenSticky = false;\n    base.leftOffset = null;\n    base.topOffset = null;\n    base.scrollBarWidth = 13;\n\n    base.init = function () {\n      base.$el.each(function () {\n        var $this = $(this);\n\n        // remove padding on <table> to fix issue #7\n        $this.css('padding', 0);\n\n        base.$originalHeader = $('thead:first', this);\n        base.$clonedHeader = base.$originalHeader.clone();\n        $this.trigger('clonedHeader.' + name, [base.$clonedHeader]);\n\n        base.$clonedHeader.addClass('tableFloatingHeader');\n        base.$clonedHeader.css('display', 'none');\n\n        base.$originalHeader.addClass('tableFloatingHeaderOriginal');\n        base.$originalHeader.after(base.$clonedHeader);\n        base.$clonedHeader.find(\".stickyExclude\").remove();\n\n        base.$printStyle = $('<style type=\"text/css\" media=\"print\">' +\n          '.tableFloatingHeader{display:none !important;}' +\n          '.tableFloatingHeaderOriginal{position:static !important;}' +\n          '</style>');\n        $('head').append(base.$printStyle);\n      });\n\n      base.setOptions(options);\n      base.updateWidth();\n      base.toggleHeaders();\n      base.bind();\n    };\n\n    base.destroy = function () {\n      base.$el.unbind('destroyed', base.teardown);\n      base.teardown();\n    };\n\n    base.teardown = function () {\n      if (base.isSticky) {\n        base.$originalHeader.css('position', 'static');\n      }\n      $.removeData(base.el, 'plugin_' + name);\n      base.unbind();\n\n      base.$clonedHeader.remove();\n      base.$originalHeader.removeClass('tableFloatingHeaderOriginal');\n      base.$originalHeader.css('visibility', 'visible');\n      base.$printStyle.remove();\n\n      base.el = null;\n      base.$el = null;\n    };\n\n    base.bind = function () {\n      base.$scrollableArea.on('scroll.' + name, base.toggleHeaders);\n      if (!base.isWindowScrolling) {\n        base.$window.on('scroll.' + name + base.id, base.setPositionValues);\n        //base.$window.on(\"touchmove.\" + name + base.id, base.setPositionValues);\n        base.$window.on('resize.' + name + base.id, base.toggleHeaders);\n      }\n      base.$scrollableArea.on('resize.' + name, base.toggleHeaders);\n      base.$scrollableArea.on('resize.' + name, base.updateWidth);\n      base.$window.on('resize.' + name, base.updateWidth);\n\n      base.detectOuterScrolls();\n    };\n\n    base.unbind = function () {\n      // unbind window events by specifying handle so we don't remove too much\n      base.$scrollableArea.off('.' + name, base.toggleHeaders);\n      if (!base.isWindowScrolling) {\n        base.$window.off('.' + name + base.id, base.setPositionValues);\n        base.$window.off('.' + name + base.id, base.toggleHeaders);\n      }\n      base.$scrollableArea.off('.' + name, base.updateWidth);\n      base.$window.off('.' + name + base.id, base.updateWidth);\n\n      // Unbind 'scroll' on parent elements that have a scroll bar.\n      base.$scrollableArea.parents().each(function(index, el) {\n        $(this).off(\".\" + name);\n      });\n    };\n\n    base.detectOuterScrolls = function() {\n      // Bind parent elements that have a scroll bar.\n      base.$scrollableArea.parents().each(function(index, el) {\n        var $this = $(this);\n        $this.off(\".\" + name);\n        if($this.hasScrollBar()) {\n          // Ensure the subheaders keep thier alignment \n          // when outer scrolling occurs.\n          $this.on(\"scroll.\" + name, base.toggleHeaders);\n          //$this.on(\"touchmove.\" + name, base.toggleHeaders);\n        }\n      });\n    };\n\n    base.toggleHeaders = function () {\n      if (base.$el) {\n        base.$el.each(function() {\n          var $this = $(this),\n            newLeft,\n            newTopOffset = base.isWindowScrolling ? (\n            isNaN(base.options.fixedOffset) ? base.options.fixedOffset.outerHeight() \n              : base.options.fixedOffset) \n              : base.$scrollableArea.offset().top + (!isNaN(base.options.fixedOffset) ? base.options.fixedOffset : 0),\n\n            offset = $this.offset(),\n\n            scrollTop = base.$scrollableArea.scrollTop() + newTopOffset,\n            scrollLeft = base.$scrollableArea.scrollLeft(),\n\n            scrolledPastTop = base.isWindowScrolling ? scrollTop > offset.top : newTopOffset > offset.top,\n            notScrolledPastBottom = (base.isWindowScrolling ? scrollTop : 0) < (offset.top + $this.height() \n              - base.$clonedHeader.height() - (base.isWindowScrolling ? 0 : newTopOffset));\n\n          if (scrolledPastTop /*&& notScrolledPastBottom*/) {\n            newLeft = offset.left /*- scrollLeft*/ + base.options.leftOffset;\n            base.$originalHeader.css({\n              'position': 'fixed',\n              'margin-top': base.options.marginTop,\n              'left': newLeft,\n              'z-index': 3 // #18: opacity bug\n            });\n            base.leftOffset = newLeft;\n            base.topOffset = newTopOffset;\n            base.$clonedHeader.css('display', '');\n            if (!base.isSticky) {\n              base.isSticky = true;\n              // make sure the width is correct: the user might have resized the browser while in static mode\n              base.updateWidth();\n\n              base.$el.trigger('sticky-change', [true]);\n            }\n            base.setPositionValues();\n          } else if (base.isSticky) {\n            base.$originalHeader.css('position', 'static');\n            base.$clonedHeader.css('display', 'none');\n            base.isSticky = false;\n            base.resetWidths($('td,th', base.$clonedHeader), $('td,th', base.$originalHeader));\n\n            base.$el.trigger('sticky-change', [false]);\n          }\n        });\n      }\n    };\n\n    base.setPositionValues = function () {\n      var winScrollTop = base.$window.scrollTop(),\n          winScrollLeft = base.$window.scrollLeft();\n      if (!base.isSticky /*|| winScrollTop < 0 || winScrollTop + base.$window.height() > base.$document.height()*/\n          || winScrollLeft < 0 || winScrollLeft + base.$window.width() > base.$document.width()) {\n        return;\n      }\n\n      base.detectOuterScrolls();\n      base.scrollBarWidth = $.scrollBarWidth(base.el);\n\n      var scrollLeft = base.$scrollableArea.scrollLeft(),\n          leftClip = base.$scrollableArea.scrollLeft() + base.getOuterScrollLeft(),\n          topClip = base.getOuterScrollTop() - base.options.marginTop,\n          height = base.$originalHeader.outerHeight();\n\n      base.$originalHeader.css({\n        'top': base.topOffset - (base.isWindowScrolling ? 0 : winScrollTop),\n        'left': base.leftOffset - (base.isWindowScrolling ? 0 : winScrollLeft),\n        \"clip\": \"rect(\"+topClip+\"px, \" + (base.$scrollableArea.outerWidth() + scrollLeft - base.scrollBarWidth) + \"px, \" + (height + 50) + \"px, \" + leftClip + \"px)\"\n      });\n    };\n\n    base.updateWidth = function () {\n      if (!base.isSticky) {\n        return;\n      }\n      // Copy cell widths from clone\n      if (!base.$originalHeaderCells) {\n        base.$originalHeaderCells = $('tr:not(\".stickyExclude\") th,td', base.$originalHeader);\n      }\n      if (!base.$clonedHeaderCells) {\n        base.$clonedHeaderCells = $('tr:not(\".stickyExclude\") th,td', base.$clonedHeader);\n      }\n      var cellWidths = base.getWidths(base.$clonedHeaderCells);\n      base.setWidths(cellWidths, base.$clonedHeaderCells, base.$originalHeaderCells);\n\n      // Copy row width from whole table\n      base.$originalHeader.css('width', base.$clonedHeader.width());\n    };\n\n    base.getWidths = function ($clonedHeaders) {\n      var widths = [];\n      $clonedHeaders.each(function (index) {\n        var width, $this = $(this);\n\n        if ($this.css('box-sizing') === 'border-box') {\n          width = $this[0].getBoundingClientRect().width; // #39: border-box bug\n        } else {\n          var $origTh = $('th', base.$originalHeader);\n          if ($origTh.css('border-collapse') === 'collapse') {\n            if (window.getComputedStyle) {\n              width = parseFloat(window.getComputedStyle(this, null).width);\n            } else {\n              // ie8 only\n              var leftPadding = parseFloat($this.css('padding-left'));\n              var rightPadding = parseFloat($this.css('padding-right'));\n              // Needs more investigation - this is assuming constant border around this cell and it's neighbours.\n              var border = parseFloat($this.css('border-width'));\n              width = $this.outerWidth() - leftPadding - rightPadding - border;\n            }\n          } else {\n            width = $this.width();\n          }\n        }\n\n        widths[index] = width;\n      });\n      return widths;\n    };\n\n    base.setWidths = function (widths, $clonedHeaders, $origHeaders) {\n      $clonedHeaders.each(function (index) {\n        var width = widths[index];\n        $origHeaders.eq(index).css({\n          'min-width': width,\n          'max-width': width\n        });\n      });\n    };\n\n    base.resetWidths = function ($clonedHeaders, $origHeaders) {\n      $clonedHeaders.each(function (index) {\n        var $this = $(this);\n        $origHeaders.eq(index).css({\n          'min-width': $this.css('min-width'),\n          'max-width': $this.css('max-width')\n        });\n      });\n    };\n\n    base.getOuterScrollTop = function() {\n      var scrollTop = 0;\n\n      base.$scrollableArea.parents(\":not(body,html)\").each(function(e, el) {\n        scrollTop += $(this).scrollTop();\n      });\n      return scrollTop;\n    };\n\n    base.getOuterScrollLeft = function() {\n      var scrollLeft = 0;\n\n      base.$scrollableArea.parents(\":not(body)\").each(function() {\n        scrollLeft += $(this).scrollLeft();\n      });\n      return scrollLeft;\n    };\n\n    base.setOptions = function (options) {\n      base.options = $.extend({}, defaults, options);\n      base.$scrollableArea = $(base.options.scrollableArea);\n      base.isWindowScrolling = base.$scrollableArea[0] === window;\n    };\n\n    base.updateOptions = function (options) {\n      base.setOptions(options);\n      // scrollableArea might have changed\n      base.unbind();\n      base.bind();\n      base.updateWidth();\n      base.toggleHeaders();\n    };\n\n    // Run initializer\n    base.init();\n  }\n\n  // A plugin wrapper around the constructor,\n  // preventing against multiple instantiations\n  $.fn[name] = function (options) {\n    return this.each(function () {\n      var instance = $.data(this, 'plugin_' + name);\n      if (instance) {\n        if (typeof options === 'string') {\n          instance[options].apply(instance);\n        } else {\n          instance.updateOptions(options);\n        }\n      } else if (options !== 'destroy') {\n        $.data(this, 'plugin_' + name, new Plugin(this, options));\n      }\n    });\n  };\n\n})(jQuery, window);";
      }
      public String getName() {
        return "stickyth";
      }
    }
    ;
  }
  private static class stickythInitializer {
    static {
      _instance0.stickythInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return stickyth;
    }
  }
  public com.google.gwt.resources.client.TextResource stickyth() {
    return stickythInitializer.get();
  }
  private void styleInitializer() {
    style = new com.google.gwt.resources.client.TextResource() {
      // jar:file:/Users/danial/.m2/repository/com/github/gwtmaterialdesign/gwt-material-table/2.0.1/gwt-material-table-2.0.1.jar!/gwt/material/design/client/resources/css/style.css
      public String getText() {
        return "* {\n    margin: 0;\n    padding: 0;\n}\n\nhtml,body {\n    height: 100%;\n    padding: 0;\n}\n\ntable {\n    font-family: \"Roboto\", sans-serif;\n}\n\nsection.table-container ::-webkit-scrollbar {\n    -webkit-overflow-scrolling: auto;\n    -webkit-appearance: none;\n    width: 8px;\n}\nsection.table-container ::-webkit-scrollbar-thumb {\n    /*border-radius: 4px;*/\n    background-color: rgba(0,0,0,.3);\n    -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5);\n}\n\nth {\n    text-transform: uppercase;\n    padding: 12px 5px 4px 20px !important;\n}\n\nth span {\n    display: inline-block;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    max-width: 100px;\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\ntr {\n    text-align: left;\n}\n\nthead {\n    border-bottom: 1px solid #E3E3E3 !important;\n    font-size: 12px;\n    color: rgba(0, 0, 0, 0.54)\n}\n\nthead tr {\n    height: 56px;\n    background-color: #fff;\n}\n\ntbody {\n    font-size: 13px;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.overflow-hidden {\n    overflow: hidden !important;\n}\n\ntbody [type=\"checkbox\"]+label:before {\n    border-radius: 0 !important;\n}\n\ntbody [type=\"checkbox\"]+label {\n    top:2px;\n}\n\ntbody [type=\"checkbox\"].filled-in+label {\n    top:6px;\n}\n\n.max-height {\n    height: 100% !important;\n}\n\n.table-container {\n    height:100%;\n    width: 100%;\n    background-color: #fff;\n    /*border-left: 1px solid #E3E3E3;\n    border-right: 1px solid #E3E3E3;\n    border-bottom: 1px solid #E3E3E3;*/\n}\n\n.table-container.stretch {\n    /*position: absolute !important;*/\n    width: 100% !important;\n    height: 100% !important;\n    /*top: 0 !important;*/\n    /*left: 0 !important;*/\n    max-height: 100% !important;\n    /*overflow: auto !important;*/\n}\n\n.table-container .progress {\n    height: 3px;\n    top: -0.6rem;\n    margin: 0;\n    margin-bottom: -3px;\n    z-index: 20;\n}\n\n.table {\n\n}\n\ntable.table .widget-cell {\n    white-space: nowrap;\n    -o-text-overflow: ellipsis;\n    text-overflow: ellipsis;\n}\n\ntable.table .cell {\n    white-space: nowrap;\n    overflow: hidden;\n    -o-text-overflow: ellipsis;\n    text-overflow: ellipsis;\n}\n\ntable.table tbody td {\n    border-radius: 0;\n    padding: 0 5px 0 20px !important;\n}\n\ntable.table td#col0.selection,\ntable.table th#col0.selection {\n    width: 45px;\n}\n\ntable.table #colex {\n    text-align: center;\n}\n\ntable.table #colex i {\n    width: 100%;\n}\n\ntable.table tbody tr.subheader {\n    cursor: pointer;\n    background-color: #fff;\n    width: 100%;\n    height: 46px;\n    left: 0;\n    right: 0;\n    z-index: 2;\n    position: absolute;\n    border-bottom: 1px solid #E3E3E3;\n\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n\n    -webkit-backface-visibility: hidden;\n    -moz-backface-visibility: hidden;\n    backface-visibility: hidden;\n}\n\ntable.table tbody tr.subheader.expanded {\n    /* CSS3 Box-Shadow */\n    -webkit-box-shadow: 0 10px 9px -12px rgba(0,0,0,0.9);\n    -moz-box-shadow: 0 10px 9px -12px rgba(0,0,0,0.9);\n    box-shadow: 0 10px 9px -12px rgba(0,0,0,0.9);\n}\n\ntable.table .table-header {\n    width: 100%;\n    display: inline-block;\n}\n\ntable.table thead th.selected {\n    color: #000;\n}\n\ntable.table tbody tr.subheader.fixed {\n    position: fixed;\n}\n\ntable.table tbody tr.subheader.fixed.passed {\n\n}\n\ntable.table tbody tr.subheader td {\n    padding: 10px 5px !important;\n}\n\ntable.table tbody tr.subheader span {\n    position: relative;\n    top: 2px;\n}\n\ntable.table tbody tr.subheader th,\ntable.table tbody tr.subheader td {\n    white-space:nowrap;\n    padding-top: 8px !important;\n    padding-bottom: 8px !important;\n}\n\ntable.table tbody tr.subheader th:first-child,\ntable.table tbody tr.subheader td:first-child {\n    padding-left: 18px !important;\n}\n\ntable.table tbody tr.selected {\n    background-color: #F5F5F5;\n}\n\ntable.table .mask {\n    position:absolute;\n    width:100%;\n    height:100%;\n    top:0;\n    opacity:0.2;\n    background-color:black;\n    z-index:9999;\n}\n\n/* Menu Dropdown */\ndiv.tool-panel ul.dropdown-content li {\n    padding-left: 8px;\n}\n\ndiv.tool-panel ul.dropdown-content li label {\n    height: 50px;\n    width: 100%;\n    padding-top: 12px;\n}\n\ndiv.tool-panel ul.dropdown-content li label:before,\ndiv.tool-panel ul.dropdown-content li label:after {\n    top: 11px;\n}\n\ndiv.tool-panel ul.dropdown-content li input.filled-in + label:before,\ndiv.tool-panel ul.dropdown-content li input.filled-in + label:after {\n    top: 14px;\n}\n\nsection.table-container div.tool-panel ul.dropdown-content {\n    max-height: 350px !important;\n    overflow-y: auto;\n    overflow-x: hidden;\n}\n\nsection.table-container div.tool-panel ul.dropdown-content li > span {\n    padding: 3px 5px;\n}\n\n.top-panel {\n    width: 100%;\n    height: 64px;\n    position: relative;\n    display: inline-block;\n    background-color: #9E9E9E;\n    border-bottom: 3px solid #D3D3D3;\n    padding: 19px 12px 3px 16px;\n    color: #fff;\n    z-index: 5;\n}\n\n.tool-panel i {\n    margin-left: 5px;\n}\n\n.info-panel { float: left; }\n.tool-panel { float: right; }\n.title {\n    top: -6px;\n    position: relative;\n    margin-left: 10px;\n    font-size: 16px;\n}\n\n.table-body {\n    width: 100%;\n}\n\n.table-body {\n    height: 100vh;\n    /*top: -6px;*/\n\n    position: relative;\n    overflow-y: auto;\n}\n\n.table-body:focus {\n    outline: none;\n}\n\n.table-footer {\n    width: 100%;\n}\n\n.table-footer span.footer-left {\n    float: left;\n    text-align: left;\n    width: 33.333%;\n}\n\n.table-footer span.footer-center {\n    display: inline-block;\n    text-align: center;\n    margin: 0 auto;\n    width: 33.333%;\n}\n\n.table-footer span.footer-right {\n    float: right;\n    text-align: right;\n    width: 33.333%;\n}\n\ntr.disabled * {\n    opacity: 0.7;\n    background: #e9e9e9;\n    cursor: not-allowed;\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\ntr.disabled:hover {\n    color: rgba(0, 0, 0, 0.87);\n    cursor: not-allowed;\n    background-color: transparent !important;\n}\n\ntr .numeric {\n    text-align: right;\n}\n\ntable.table thead tr th {\n    background-color: #fff;\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\ntr.data-row, table.table thead tr th.sortable {\n    cursor: pointer;\n}\n\ntable.table tbody tr.data-row {\n    border-bottom: 1px solid #E6E6E6;\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\ntable.table tbody tr.data-row:hover {\n    background: #EEEEEE;\n    color: #000000;\n}\n\ntable.table thead tr th.sortable:hover {\n    color: rgba(0, 0, 0, 0.87);\n}\n\ntable.table tbody tr.expansion td {\n    padding: 0 !important;\n}\n\ntable.table tbody tr.expansion td div.expanded {\n    max-height: 600px;\n    overflow: hidden;\n    border-bottom: 1px solid #E6E6E6;\n}\n\ntable.table tbody tr.expansion td div.expanded section.overlay {\n    position: absolute;\n    background: #fff;\n    opacity: 0.5;\n    font-size: 28px;\n    width: 100%;\n}\n\ntable.table tbody tr.expansion td div.expanded section.overlay i {\n    position: relative;\n    left: 50%;\n    top: calc(40% - 19px);\n}\n\n/* --- Expanded Row Collapsed --- */\ntable.table tbody tr.expansion td > div {\n    display: block;\n    width: 100%;\n    max-height: 0;\n    line-height: 150%;\n    overflow-y: hidden;\n\n    /* CSS3 transition */\n    -webkit-transition: all 0.25s cubic-bezier(0.35,0,0.35,1);\n    -moz-transition: all 0.25s cubic-bezier(0.35,0,0.35,1);\n    -o-transition: all 0.25s cubic-bezier(0.35,0,0.35,1);\n    -ms-transition: all 0.25s cubic-bezier(0.35,0,0.35,1);\n    transition: all 0.25s cubic-bezier(0.35,0,0.35,1);\n}\n\n/* --- Expanded Row Columns --- */\n/* --- 100% Width Column --- */\ntable.table tbody tr.expansion td div .content {\n    width: 100%;\n    height: 100%;\n    display: block;\n    float: left;\n    overflow: auto;\n    background: #f5f5f5;\n}\n\n/* --- Expanded Headers --- */\ntable.table tbody tr.expansion td div h3.expanded_header {\n    margin: 0 0 15px 0;\n    padding: 0;\n    font-size: 16px;\n    font-weight: normal;\n    color: #000000;\n    text-shadow: 0 1px 0 #ffffff;\n}\n\ntable.table tbody tr.expansion td div h4.expanded_header {\n    margin: 0;\n    padding: 8px;\n    font-size: 14px;\n    font-weight: normal;\n    color: #000000;\n    text-shadow: 0 1px 0 #ffffff;\n    background: #f5f5f5;\n}\n\n/* --- Expanded Paragraph --- */\ntable.table tbody tr.expansion td > div p {\n    margin: 4px 0 4px 0 !important;\n    padding: 0 !important;\n}\n\n/* ==================== RESPONSIVE LAYOUT ==================== */\n\n/* --- Smaller than standard 960 --- */\n@media only screen and (max-width: 960px), (min-device-width: 768px) and (max-device-width: 959px) {\n    table.table {\n        /*width: 768px;*/ /* --- Overall Table Width --- */\n    }\n}\n\n/* --- Mobile Devices 480 - 768px --- */\n@media only screen and (max-width: 768px), (min-device-width: 480px) and (max-device-width: 767px) {\n    table.table {\n        /*width: 480px;*/ /* --- Overall Table Width --- */\n    }\n\n    table.table thead tr {\n        height: auto;\n    }\n\n    .table-container {\n        -ms-touch-action: none;\n        touch-action: none;\n    }\n\n    .table-container .top-panel {\n        height: 36px;\n        padding-top: 5px;\n    }\n}\n\n/* --- Mobile Devices Up To 560px --- */\n@media only screen and (max-width: 520px), (min-device-width: 0px) and (max-device-width: 519px) {\n    table.table {\n        /*width: 420px;*/ /* --- Overall Table Width --- */\n    }\n\n    table.table tbody {\n        display: table;\n        width: 100%;\n    }\n\n    /* --- Change Apperance --- */\n    thead,\n    tbody,\n    tr,\n    td:not(tr.expansion) {\n        display: inline-block;\n    }\n\n    table.table .numeric {\n        text-align: left !important;\n    }\n\n    table.table {\n        display: block !important;\n    }\n\n    /* --- Cell Works Like A Row --- */\n    table.table tbody td {\n        padding: 6px 8px 6px 8px !important;\n        line-height: 150% !important;\n        border-top: 0;\n        position: relative;\n        width: 100% !important;\n        display: block !important;\n    }\n\n    table.table tbody tr.data-row td:first-child {\n        background: #f0f0f0;\n        padding-left: 0 !important;\n        padding-top: 0 !important;\n        -webkit-box-shadow: inset 0 1px 0 -1px #ffffff, inset 0 -1px 0 0 #c5c5c5;\n        -moz-box-shadow: inset 0 1px 0 -1px #ffffff, inset 0 -1px 0 0 #c5c5c5;\n        box-shadow: inset 0 1px 0 -1px #ffffff, inset 0 -1px 0 0 #c5c5c5;\n    }\n\n    table.table tbody tr.data-row td:first-child:before {\n        padding-right: 6px !important;\n    }\n\n    table.table tbody tr.data-row td:first-child label {\n        top: 6px;\n    }\n\n    /*table.table tbody tr.data-row td:nth-child(2) {\n        display: inline !important;\n    }*/\n\n    /* --- Disable Header Row --- */\n    table.table thead {\n        display: none;\n    }\n\n    table.table tbody tr.expansion {\n        margin-top: -19px;\n    }\n\n    /* --- 50% Width Column Turn Into 100% Width Column --- */\n    table.table tbody tr.expansion td div .column_50 {\n        width: 100%;\n        height: 100%;\n        margin-left: 2%;\n        margin-right: 2%;\n        float: left;\n        padding: 10px 0 10px 0;\n        display: block;\n    }\n\n    table.table tbody tr.expansion td div .column_50:last-child {\n        width: 100%;\n        height: 100%;\n        margin-left: 2%;\n        margin-right: 2%;\n        float: left;\n        padding: 10px 0 10px 0;\n        display: block;\n    }\n\n    /* --- 33% Width Column Turn Into 100% Width Column --- */\n    table.table tbody tr.expansion td div .column_33 {\n        width: 100%;\n        height: 100%;\n        margin-left: 2%;\n        margin-right: 2%;\n        float: left;\n        padding: 10px 0 10px 0;\n        display: block;\n    }\n\n    table.table tbody tr.expansion td div .column_33:first-child {\n        width: 100%;\n        height: 100%;\n        margin-left: 2%;\n        margin-right: 2%;\n        float: left;\n        padding: 10px 0 10px 0;\n        display: block;\n    }\n\n    table.table tbody tr.expansion td div .column_33:last-child {\n        width: 100%;\n        height: 100%;\n        margin-left: 2%;\n        margin-right: 2%;\n        float: left;\n        padding: 10px 0 10px 0;\n        display: block;\n    }\n\n    /* --- Column Labels --- */\n    /* --- Use The Same Labels As In HTML Document --- */\n    tr.data-row td:before {\n        padding-right: 8px;\n        white-space: nowrap;\n    }\n\n    tr.data-row td:before {\n        font-weight: bold;\n        color: #000000;\n    }\n\n    tr.data-row td:before {\n        content: attr(data-title);\n    }\n}\n";
      }
      public String getName() {
        return "style";
      }
    }
    ;
  }
  private static class styleInitializer {
    static {
      _instance0.styleInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return style;
    }
  }
  public com.google.gwt.resources.client.TextResource style() {
    return styleInitializer.get();
  }
  private void tableSubHeadersInitializer() {
    tableSubHeaders = new com.google.gwt.resources.client.TextResource() {
      // jar:file:/Users/danial/.m2/repository/com/github/gwtmaterialdesign/gwt-material-table/2.0.1/gwt-material-table-2.0.1.jar!/gwt/material/design/client/resources/js/table-subheaders.js
      public String getText() {
        StringBuilder builder = new StringBuilder();
        builder.append("/*\n * #%L\n * GwtMaterialDesign\n * %%\n * Copyright (C) 2015 GwtMaterial\n * %%\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * #L%\n */\n\n/**\n * @author Ben Dol\n */\nTableSubHeaders.id = 0;\n\nTableSubHeaders.newInstance = function($table, $stickies) {\n  return new TableSubHeaders($table, $stickies);\n};\n\nfunction TableSubHeaders($table, $stickies) {\n  TableSubHeaders.id++;\n\n  // To avoid scope issues, use \"base\" instead of \"this\"\n  // to reference this class from internal events and functions.\n  var base = this,\n      $base = $(base);\n\n  base.name = \"subheaders\" + TableSubHeaders.id;\n  base.$window = $(window);\n  base.$document = $(document);\n  base.$tableBody = $table.find(\"tbody\");\n  base.$tableParents = $table.parents();\n  base.$stickies = null;\n  base.options = [];\n  base.cache = [];\n\n  base.loaded = false;\n  base.scrollBarWidth = 13;\n  base.debug = {\n    enabled: false,\n    smartScroll: { table: 0, window: 0, outer: 0 },\n    touchmove: { table: 0, window: 0, outer: 0 },\n    resize: { table: 0, window: 0 }\n  };\n\n  var defaults = {\n    marginTop: 0,\n    marginLeft: 0,\n    scrollThrottle: 10,\n    resizeThrottle: 100\n  };\n\n  base.load = function (opts) {\n    base.options = $.extend({}, defaults, opts);\n\n    base.bind();\n    base.detect();\n\n    base.recalculate(true);\n    base.loaded = true;\n  };\n\n  base.unload = function () {\n    base.options = [];\n\n    base.unbind();\n\n    base.$stickies.each(function() {\n      var $this = $(this);\n      $this.removeClass(\"fixed\").removeClass(\"passed\").removeAttr(\"style\");\n      $this.unwrap();\n      $table.scrollTop(0);\n    });\n\n    base.loaded = false;\n  };\n\n  base.reload = function () {\n    base.unload();\n    base.load();\n  };\n\n  base.detect = function () {\n    base.$stickies = $($stickies, $table);\n\n    // Bind toggle click\n    base.$stickies.off(\".\" + base.name);\n    base.$stickies.on(\"tap.\"+base.name+\" click.\"+base.name, function(e) {\n      base.toggle($(this));\n    });\n\n    var filtered = $($stickies, $table).filter(function() {\n      return $(this).parent().is(\":not(div)\");\n    });\n\n    filtered.each(function () {\n      $(this).wrap(\"<div style='width:100%;z-index:2;cursor:pointer;background-color:#fff;'/>\");\n    });\n  };\n\n  base.bind = function () {\n    base.unbind();\n\n    var scrollThrottle = base.options.scrollThrottle,\n        resizeThrottle = base.options.resizeThrottle;\n\n    $table.smartScroll(base.name, $.throttle(scrollThrottle, function(e, scroll) {\n      if(base.debug.enabled) base.debug.smartScroll.table++;\n      base.scroll(e, scroll);\n    }));\n    $table.on(\"resize.\" + base.name, $.debounce(resizeThrottle, function() {\n      if(base.debug.enabled) base.resize.table++;\n      base.recalculate(true);\n    }));\n\n    base.$window.smartScroll(base.name, $.throttle(scrollThrottle, function(e, scroll) {\n      if(base.debug.enabled) base.debug.smartScroll.window++;\n      base.alignment(scroll);\n    }));\n    base.$window.on(\"resize.\" + base.name, $.debounce(resizeThrottle, function() {\n      if(base.debug.enabled) base.debug.resize.window++;\n      base.recalculate(true);\n    }));\n\n    base.detectOuterScrolls();\n  };\n\n  base.unbind = function () {\n    $table.off(\".\" + base.name);\n    base.$window.off(\".\" + base.name);\n\n    // Unbind sticky events\n    if(base.$stickies) {\n      base.$stickies.off(\".\" + base.name);\n    }\n\n    // Unbind 'scroll' on parent elements that have a scroll bar.\n    base.$tableParents.each(function(index, el) {\n      $(this).off(\".\" + base.name);\n    });\n  };\n\n  base.detectOuterScrolls = function() {\n    var scrollThrottle = base.options.scrollThrottle;\n\n    base.$tableParents.off(\".\" + base.name);\n\n    // Bind parent elements that have a scroll bar.\n    base.$tableParents.filter(function() {\n      return $(this).hasScrollBar();\n    }).smartScroll(base.name, $.throttle(scrollThrottle, function(e, scroll) {\n      if(base.debug.enabled) base.debug.smartScroll.outer++;\n      base.alignment(scroll);\n    }));\n  };\n\n  base.toggle = function($subheader) {\n    if($subheader.hasClass(\"expanded\")) {\n      base.close($subheader);\n    } else {\n      base.open($subheader);\n    }\n  };\n\n  base.open = function($subheader) {\n    $subheader.addClass(\"expanded\");\n\n    // Trigger an 'opening' event\n    $base.trigger(\"opening\", [$subheader]);\n\n    // Get all until next subheader\n\n    var $icon = $subheader.find(\"i\");\n    if($icon != null) {\n      var closeIcon = $subheader.attr(\"data-close-icon\");\n      if(closeIcon === undefined) {\n        closeIcon = \"remove\";\n      }\n      $icon.text(closeIcon);\n    }\n\n    var parent = $subheader.parent();\n    // Get rows by 'tr' rather than 'tr.data-row' since\n    // expansion content should be touched also.\n    var rows = parent.nextUntil(\"div\", \"tr\");\n\n    // Invoke .show and ensure recalculation after finished.\n    // Need to recalculate the positions after showing\n    // to ensure the sticky headers follow.\n    $.when(rows.show(200)).then(function() {\n      base.recalculate(true);\n\n      // Trigger an 'opened' event\n      $subheader.trigger(\"opened\", [$subheader]);\n    });\n  };\n\n  base.close = function($subheader) {\n    $subheader.removeClass(\"expanded\");\n\n    // Trigger a 'closing' event\n    $base.trigger(\"closing\", [$subheader]);\n\n    var $icon = $subheader.find(\"i\");\n    if($icon != null) {\n      var openIcon = $subheader.attr(\"data-open-icon\");\n      if(openIcon === undefined) {\n        openIcon = \"add\";\n      }\n      $icon.text(openIcon)\n    }\n\n    // Get all until next subheader\n    var rows = $subheader.parent().nextUntil(\"div\");\n\n    // Invoke .hide and ensure recalculation after finished.\n    // Need to recalculate the positions after showing\n    // to ensure the sticky headers follow.\n    $.when(rows.hide(200)).then(function() {\n      base.recalculate(true);\n\n      // Trigger a 'closed' event\n      $subheader.trigger(\"closed\", [$subheader]);\n    });\n  };\n\n  base.recalculate = function(fireEvents) {\n    if(fireEvents) {\n      $base.trigger(\"before-recalculate\");\n    }\n\n    // Calculate scrollbar width\n    base.scrollBarWidth = $.scrollBarWidth(base.$tableBody.get(0));\n\n    // Detect any new outer scrolls\n    base.detectOuterScrolls();\n\n    // Calculate any new heights\n    base.updateHeights();\n\n    var scrollTop = $table.scrollTop(),\n        outerScrollTop = base.getOuterScrollTop(),\n        fullWidth = base.$tableBody.outerWidth();\n\n    base.$stickies.each(function () {\n      var $this = $(this);\n\n      $this.removeClass(\"fixed\").removeClass(\"passed\").removeAttr(\"style\");\n\n      // Calculate the new position\n      $.data(this, \"pos\", $this.offset().top + outerScrollTop + scrollTop + 1);\n\n      base.updateWidth($this, fullWidth - 2);\n    });\n\n    // By default this method will fire, even when bound\n    // to any particular jQuery event.\n    if(fireEvents) {\n      $base.trigger(\"after-recalculate\");\n    }\n\n    base.scroll();\n  };\n\n  // Attempts to perform top scrolls using position: fixed since its the only\n  // way to retain flexible styling with high performance (on mobile, etc).\n  // This method has more overhead to ensure the subheader positions maintain \n  // within the boundries of the table (i.e. automatic edge clipping, etc), \n  // especially with multiple scrollable layers.\n  base.scroll = function (e, scroll) {\n    var offset = $table.offset(),\n        clipWidth = $table.innerWidth(),\n        fullWidth = base.$tableBody.outerWidth(),\n\n        // Top variables\n        top = offset.top + base.options.marginTop,\n        scrollTop = $table.scrollTop() + base.getOuterScrollTop(),\n        winScrollTop = base.$window.scrollTop(),\n\n        // Left variables\n        left = offset.left + base.options.marginLeft,\n        scrollLeft = $table.scrollLeft(),\n        outerScrollLeft = base.getOuterScrollLeft();\n\n    base.$stickies.each(function (i) {\n      var $this = $(this),\n          forceXScroll = false;\n\n      if(!scroll || scroll.isY()) {\n        var $nextSticky = base.$stickies.eq(i + 1),\n            $prevSticky = base.$stickies.eq(i - 1),\n            pos = $.data(this, \"pos\");\n\n        // Y Axis Scrolling\n        if (pos <= scrollTop + top) {\n          base.emulateYScroll($this, top, winScrollTop, scrollTop);\n\n          if(!$this.hasClass(\"passed\")) {\n            if(!$this.hasClass(\"fixed\")) {\n              $this.addClass(\"fixed\");\n\n              // Ensure the X scroll is performed when\n              // the Y scroll sticks a new subheader.\n              forceXScroll = scroll && !scroll.isX();\n            }\n\n            // Update the subheaders width\n            base.updateWidth($this, fullWidth);\n            \n            $prevSticky.css(\"display\", \"none\");\n\n            // Try display the current sticky\n            $this.css({ \"display\": \"\" });\n\n            if ($nextSticky.length > 0 && scrollTop + top >= pos - $prevSticky.outerHeight()) {\n              $this.addClass(\"passed\");\n            }\n          }\n        } else {\n          var width = $this.outerWidth();\n          $this.removeClass(\"fixed\").removeAttr(\"style\");\n          //$this.width(width);\n\n          // Try display the previous sticky\n          $prevSticky.css({ \"display\": \"\" });\n\n          if ($prevSticky.length > 0 && scrollTop + top <= pos - $prevSticky.outerHeight()) {\n            $prevSticky.removeClass(\"passed\");\n          }\n        }\n      }\n\n      // X Axis Scrolling\n      if(!scroll || scroll.isX() || forceXScroll) {\n        if($this.hasClass(\"fixed\")) {\n          base.emulateXScroll($this, clipWidth, left, scrollLeft, outerScrollLeft);\n        }\n      }\n    });\n\n    // Update passed subheaders top position.\n    base.$stickies.filter(\".passed\").each(function(i, el) {\n      var $this = $(this),\n          $nextSticky = base.$stickies.eq(i + 1);\n\n      var newTop = $.data($nextSticky[0], \"pos\") - scrollTop - $this.outerHeight() - winScrollTop;\n      $this.data(\"push-back\", parseInt($this.css(\"top\").replace(\"px\", \"\") - newTop));\n      $this.css({ \"top\": newTop });\n\n      // TODO: Fix the clip issue\n      // base.emulateYScroll($this, newTop, winScrollTop, scrollTop);\n    });\n  };\n\n  base.emulateYScroll = function($sticky, top, winScrollTop, scrollTop, outerScroll) {\n    var height = $sticky.outerHeight() + 50,\n        totalTop = (outerScroll ? outerScroll : base.getOuterScrollTop()) - base.options.marginTop;\n\n    var topClip = totalTop + \"px\",\n        bottomClip = height + \"px\",\n        rightClip = $sticky.data(\"clip-right\"),\n        leftClip = $sticky.data(\"clip-left\");\n\n    // Handle the passed clipping\n    if($sticky.hasClass(\"passed\")) {\n      var pushBack = $sticky.data(\"push-back\");\n       topClip = (totalTop + pushBack) + \"px\";\n    }\n\n    // Update Y clipping data\n    $sticky.data(\"clip-top\", topClip)\n           .data(\"clip-bottom\", bottomClip);\n\n    $sticky.css({\n      \"top\": top - winScrollTop,\n      \"clip\": \"rect(\"+ topClip +\", \" + rightClip + \", \" + bottomClip + \", \" + leftClip + \")\"\n    });\n  };\n\n  base.emulateXScroll = function($sticky, tableWidth, left, scrollLeft, outerScroll) {\n    var leftClip = (scrollLeft + (outerScroll ? outerScroll : base.getOuterScrollLeft())) + \"px\",\n        rightClip = (tableWidth + scrollLeft - base.scrollBarWidth) + \"px\",\n        topClip = $sticky.data(\"clip-top\") || \"auto\",\n        bottomClip = $sticky.data(\"clip-bottom\") || \"auto\";\n\n    // Update X clipping data\n    $sticky.data(\"clip-left\", leftClip)\n           .data(\"clip-right\", rightClip);\n\n    $sticky.css({\n      \"left\": left - scrollLeft - base.$window.scrollLeft(),\n      \"clip\": \"rect(\"+ topClip +\", \" + rightClip + \", \" + bottomClip + \", \" + leftClip + \")\"\n    });\n  };\n\n  // Applies the alignment of all the outer scroll positions.\n  base.alignment = function(scroll) {\n    var offset = $table.offset(),\n        clipWidth = $table.innerWidth(),\n        fullWidth = base.$tableBody.outerWidth(),\n        xScroll = !scroll || scroll.isX(),\n        yScroll = !scroll || scroll.isY(),\n\n        // Top variables\n        winScrollTop = (yScroll ? base.$window.scrollTop() : 0),\n        top = (yScroll ? offset.top + base.options.marginTop : 0),\n        scrollTop = (yScroll ? $table.scrollTop() + base.getOuterScrollTop() : 0),\n\n        // Left variables\n        left = (xScroll ? offset.left + base.options.marginLeft : 0),\n        scrollLeft = (xScroll ? $table.scrollLeft() : 0),\n        outerScrollLeft = (xScroll ? base.getOuterScrollLeft() : 0);\n\n    base.$stickies.filter(\".fixed\").each(function (i) {\n      var $this = $(this);\n\n      if(!scroll || scroll.isY()) {\n        var newTop = top;\n\n        // Calculate 'passed' stickies position based on outer scrollTop's.\n        if($this.hasClass(\"passed\")) {\n          var $nextSticky = base.$stickies.eq(i + 1);\n          newTop = $.data($nextSticky[0], 'pos') - scrollTop - $this.outerHeight();\n        }\n\n        base.emulateYScroll($this, newTop, winScrollTop, scrollTop);\n\n        // When the scrollbar hides or displays\n        base.updateWidth($this, fullWidth);\n      }\n\n      if(xScroll) {\n        base.emulateXScroll($this, clipWidth, left, scrollLeft, outerScrollLeft);\n      }\n    });\n  };\n\n  base.getOuterScrollTop = function() {\n    var scrollTop = 0;\n\n    base.$tableParents.filter(\":not(body,html)\").each(function() {\n      scrollTop += $(this).scrollTop();\n    });\n    return scrollTop;\n  };\n\n  base.getOuterScrollLeft = function() {\n    var scrollLeft = 0;\n\n    base.$tableParents.filter(\":not(body,html)\").each(function() {\n      scrollLeft += $(this).scrollLeft();\n    });\n    return scrollLeft;\n  };\n\n  base.updateCellWidths = function ($sticky) {\n    // Copy cell widths from header\n    var cellWidths = base.getCellWidths($(\"th,td\", $(\"thead\", $table)));\n    base.setCellWidths(cellWidths, $sticky);\n  };\n\n  base.setCellWidths = function (widths, $sticky) {\n    $sticky.find(\"th,td\").each(function (index) {\n      var $this = $(this),\n          width = widths[index];\n\n      $this.css({\n        \"min-width\": width,\n        \"max-width\": width\n      });\n    });\n  };\n\n  base.getCellWidths = function ($headers) {\n    var widths = [];\n    $headers.each(function (index) {\n      var width, $this = $(this);\n\n      if ($this.css(\"box-sizing\") === \"border-box\") {\n        // when border-box types are used\n        width = this.getBoundingClientRect().width;\n      } else {\n        var $origTh = $(\"th\", base.$originalHeader);\n        if ($origTh.css(\"border-collapse\") === \"collapse\") {\n          if (window.getComputedStyle) {\n            width = parseFloat(window.getComputedStyle(this, null).width);\n          } else {\n            // ie8 only\n            var leftPadding = parseFloat($this.css(\"padding-left\"));\n            var rightPadding = parseFloat($this.css(\"padding-right\"));\n            // Needs more investigation - this is assuming constant border \n            // around this cell and it's neighbours.\n            var border = parseFloat($this.css(\"border-width\"));\n            width = $this.outerWidth() - leftPadding - rightPadding - border;\n          }\n        } else {\n          width = $this.width();\n        }\n      }\n\n      widths[index] = width;\n    });\n    return widths;\n  };\n\n  base.updateWidth = function($sticky, width) {\n    /*if(width) {\n      $sticky.width(width);\n    }*/\n\n    // Calculate new cell widths\n    base.updateCellWidths($sticky);\n  };\n\n  base.updateWidths = function() {\n    /*base.$stickies.each(function() {\n      base.updateWidth($(this));\n    });*/\n  };\n\n  base.updateHeights = function() {\n    base.$stickies.each(function() {\n      var $this = $(this);\n      var height = $this.attr(\"data-height\");\n      if(typeof height === typeof undefined) {\n        height = $this.outerHeight();\n      }\n      $this.parent().height(height);\n    });\n  };\n\n  base.updateHeight = function(el, height) {\n    if($.contains(base.$stickies, $(el))) {\n      $(el).parent().height(height);\n    }\n  };\n\n  base.setMarginTop = function(marginTop) {\n    base.options.marginTop = marginTop;\n  };\n\n  base.se");
        builder.append("tMarginLeft = function(marginLeft) {\n    base.options.marginLeft = marginLeft;\n  };\n\n  base.isLoaded = function() {\n    return base.loaded;\n  };\n\n  base.getDebugInfo = function() {\n    return base.debug;\n  }\n}\n");
        return builder.toString();
      }
      public String getName() {
        return "tableSubHeaders";
      }
    }
    ;
  }
  private static class tableSubHeadersInitializer {
    static {
      _instance0.tableSubHeadersInitializer();
    }
    static com.google.gwt.resources.client.TextResource get() {
      return tableSubHeaders;
    }
  }
  public com.google.gwt.resources.client.TextResource tableSubHeaders() {
    return tableSubHeadersInitializer.get();
  }
  private static java.util.HashMap<java.lang.String, com.google.gwt.resources.client.ResourcePrototype> resourceMap;
  private static com.google.gwt.resources.client.TextResource greedyScroll;
  private static com.google.gwt.resources.client.TextResource jQueryExt;
  private static com.google.gwt.resources.client.TextResource stickyth;
  private static com.google.gwt.resources.client.TextResource style;
  private static com.google.gwt.resources.client.TextResource tableSubHeaders;
  
  public ResourcePrototype[] getResources() {
    return new ResourcePrototype[] {
      greedyScroll(), 
      jQueryExt(), 
      stickyth(), 
      style(), 
      tableSubHeaders(), 
    };
  }
  public ResourcePrototype getResource(String name) {
    if (GWT.isScript()) {
      return getResourceNative(name);
    } else {
      if (resourceMap == null) {
        resourceMap = new java.util.HashMap<java.lang.String, com.google.gwt.resources.client.ResourcePrototype>();
        resourceMap.put("greedyScroll", greedyScroll());
        resourceMap.put("jQueryExt", jQueryExt());
        resourceMap.put("stickyth", stickyth());
        resourceMap.put("style", style());
        resourceMap.put("tableSubHeaders", tableSubHeaders());
      }
      return resourceMap.get(name);
    }
  }
  private native ResourcePrototype getResourceNative(String name) /*-{
    switch (name) {
      case 'greedyScroll': return this.@gwt.material.design.client.resources.MaterialTableDebugBundle::greedyScroll()();
      case 'jQueryExt': return this.@gwt.material.design.client.resources.MaterialTableDebugBundle::jQueryExt()();
      case 'stickyth': return this.@gwt.material.design.client.resources.MaterialTableDebugBundle::stickyth()();
      case 'style': return this.@gwt.material.design.client.resources.MaterialTableDebugBundle::style()();
      case 'tableSubHeaders': return this.@gwt.material.design.client.resources.MaterialTableDebugBundle::tableSubHeaders()();
    }
    return null;
  }-*/;
}
